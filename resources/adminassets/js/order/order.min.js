$(document).ready(function() {
    var dt_filter_table = $('.dt-column-search');

    if (dt_filter_table.length) {
        var dt_basic = dt_filter_table.DataTable({
            processing: true,
            serverSide: true,
            deferRender: true,
            ajax: getListingUrl,
            search: { regex: true },
            searchPanes: { clear: true },
            language: {
                paginate: {
                    previous: '&nbsp;',
                    next: '&nbsp;'
                },
                "processing": "Hang on. Waiting for response...",
                searchPlaceholder: "Search"


            },
            columns: [{ data: 'id', name: 'id', defaultContent: '-'}, 
                      { data: 'order_nr' , name: 'order_nr' , defaultContent: '-'}, 
                      { data: 'created_at' , name: 'created_at', defaultContent: '-'}, 
                      { data: 'customer' , name: 'user.email' , defaultContent: '-'}, 
                      { data: 'total' , name: 'total' , defaultContent: '-'}, 
                      { data: 'financial_status' , name: 'financial_status' , defaultContent: '-'}, 
                      { data: 'status' , name: 'status' , defaultContent: '-'},
                      { data: 'admin_approve' , name: 'admin_approve' , defaultContent: '-'},
                      { data: 'method' , name: 'payment_method_id' , defaultContent: '-'},
                      { data: 'fulfillment_status' , name: 'fulfillment_status' , defaultContent: '-'},
                      { data: 'id', name: 'id'}, 
                      { data: '' , name: displayglobalActions , defaultContent: '-'}, 
            ],  
            fixedColumns:   {
                left: 2,
                right: 1
            },
            columnDefs: [
                {
                  targets: 0,
                  orderable: false,
                  responsivePriority: 1,
                  render: function (data, type, full, meta) {
                    return (
                      '<div class="custom-control custom-checkbox"> <input class="custom-control-input dt-checkboxes" type="checkbox" value="'+ full.id +'" id="checkbox" /><label class="custom-control-label" for="checkbox"></label></div>'
                    );
                  },
                  checkboxes: {
                    selectAllRender:
                      '<div class="custom-control custom-checkbox"> <input class="custom-control-input" type="checkbox" value="" id="checkboxSelectAll" /><label class="custom-control-label" for="checkboxSelectAll"></label></div>'
                  }
                },
                {
                    targets: 1,
                    responsivePriority: 2,
                },
                {
                    targets: 2,
                    responsivePriority: 3,
                    className: 'text-nowrap'
                },
                {
                    targets: 3,
                    responsivePriority: 4,
                },
                {
                    targets: 4,
                    responsivePriority: 5,
                    className: 'text-nowrap',
                    render: function (data, type, full, meta) {
                        return full.currency_symbol+ " " + full.total;
                    }
                },
                {
                    targets: 5,
                    responsivePriority: 6,
                    render: function (data, type, full, meta) {
                        var status = full['financial_status'];
                        var paid_at = full['paid_at'];
                        if(status == 'Expired' || status == 'Failed' || status == 'Voided'){
                            var row_output = '<div class="badge badge-danger" title="'+paid_at+'">'+status+'</div>';
                        } else if(status == 'Paid'){
                            var row_output = '<div class="badge badge-success" title="'+paid_at+'">'+status+'</div>';
                        } else{
                            var row_output = '<div class="badge badge-warning" title="'+paid_at+'">'+status+'</div>';
                        }   
                        
                        return row_output;
                    }
                },
                {
                    targets: 6,
                    responsivePriority: 7,
                    render: function (data, type, full, meta) {
                        var status = full['status'];
                        if(status == 'Open'){
                            var row_output = '<div class="badge badge-success">'+status+'</div>';
                        } else if(status == 'Archived'){
                            var row_output = '<div class="badge badge-secondary">'+status+'</div>';
                        } else{
                            var row_output = '<div class="badge badge-danger">'+status+'</div>';
                        }   
                        
                        return row_output;
                    }
                },
                {
                    targets: 7,
                    responsivePriority: 8,
                    orderable: true,
                    render: function (data, type, full, meta) {

                        var approve = (full.admin_approve) ? 'checked' : '';
                        return (

                            '<div class="custom-control custom-switch custom-switch-success">'+
                                '<input type="checkbox" class="custom-control-input" id="customSwitch'+full.order_nr+'" onclick="statusApprovedChange('+full.order_nr+')" '+ approve +' />'+
                                '<label class="custom-control-label" for="customSwitch'+full.order_nr+'">'+
                                    '<span class="switch-icon-left">'+
                                        feather.icons['check'].toSvg()+
                                    '</span>'+
                                    '<span class="switch-icon-right">'+
                                        feather.icons['x'].toSvg()+
                                    '</span>'+
                                '</label>'+
                            '</div>'
                        );
                    }
                },
                {
                    targets: 8,
                    responsivePriority: 9,
                    orderable: true,
                },
                {
                    targets: 9,
                    responsivePriority: 10,
                    render: function (data, type, full, meta) {
                        var status = full['fulfillment_status'];
                        if(status == 'Fulfilled'){
                            var row_output = '<div class="badge badge-secondary">'+status+'</div>';
                        } else {
                            var row_output = '<div class="badge badge-warning">'+status+'</div>';
                        } 
                        
                        return row_output;
                    }
                },
                {
                    targets: 10,
                    responsivePriority: 11,
                    searchable: true,
                    visible: false
                },
                {
                    targets: -1,
                    responsivePriority: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function(data, type, full, meta) {
                        return (
                            '<div class="d-inline-flex">' +
                            '<a href="'+ getListingUrl + '/' + full.id + '" class="btn-view" data-id="'+full.id+'" >' +
                            feather.icons['eye'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) +
                            '</a>' +
                            '<a href="'+ getListingUrl + '/' + full.id + '/edit' + '" class="item-edit" data-id="'+full.id+'" >' +
                            feather.icons['edit'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) +
                            '</a>'+
                            '<a href="javascript:;" class="delete-record btn_delete" data-id="'+full.id+'">' +
                            feather.icons['trash-2'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) +
                            '</a>' +
                            '<a href="'+ refundOrderUrl + '/' + full.id + '" class="refund-item" data-id="'+full.id+'" >' +
                            feather.icons['corner-up-left'].toSvg({
                                class: 'font-small-4'
                            }) +
                            '</a>' +
                            '</div>'
                        );
                    }
                }
            ],
            "createdRow": function( row, data, dataIndex ) {
                $(row).attr('data-id', data.id).addClass('clickable-row');
            },
            order: [
                [1, 'desc']
            ],
            dom: '<"card-header border-bottom p-1"<"head-label"><"dt-action-buttons text-right"B>><"d-flex justify-content-between align-items-center mx-0 row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>t<"d-flex justify-content-between mx-0 row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
            orderCellsTop: true,
            displayLength: 10,
            lengthMenu: [10, 25, 50, 75, 100,200,400,500,1000,1500,2000],
            buttons: [
                {
                    extend: 'collection',
                    className: 'btn btn-outline-secondary dropdown-toggle mr-2',
                     attr: {
                        'id': 'exportbutton'
                    },
                    text: feather.icons['share'].toSvg({
                        class: 'font-small-4 mr-50'
                    }) + 'Export',
                    buttons: [{
                            extend: 'print',
                            text: feather.icons['printer'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) + 'Print',
                            className: 'dropdown-item',
                            exportOptions: {
                                columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                            }
                        },
                        {
                            extend: 'csv',
                            text: feather.icons['file-text'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) + 'Csv',
                            className: 'dropdown-item',
                            exportOptions: {
                                columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                            }
                        },
                        {
                            extend: 'excel',
                            text: feather.icons['file'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) + 'Excel',
                            className: 'dropdown-item',
                            exportOptions: {
                                columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                            }
                        },
                        {
                            extend: 'pdf',
                            text: feather.icons['clipboard'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) + 'Pdf',
                            className: 'dropdown-item',
                            exportOptions: {
                                columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                            }
                        },
                        {
                            extend: 'copy',
                            text: feather.icons['copy'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) + 'Copy',
                            className: 'dropdown-item',
                            exportOptions: {
                                columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                            }
                        }
                    ],
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                        $(node).parent().removeClass('btn-group');
                        setTimeout(function() {
                            $(node).closest('.dt-buttons').removeClass('btn-group').addClass('d-inline-flex');
                        }, 50);
                    }
                },
                // {
                //     text: feather.icons['plus'].toSvg({
                //         class: 'mr-50 font-small-4'
                //     }) + 'Add New Record',
                //     className: 'create-new btn btn-primary order-create',
                //     attr: {
                //         'data-toggle': 'modal',
                //         'data-target': '#modals-slide-in',
                //         'id'         :  'btnCreate'
                //     },
                //     init: function(api, node, config) {
                //         $(node).removeClass('btn-secondary');
                //     }
                // }
            ],
             initComplete: function(){
                if($("#order_export_access").length != 1)
                {
                    $("#exportbutton").remove();
                }  
                if($("#order_create").length != 1)
                {
                    $("#btnCreate").remove();
                }
                if($("#order_edit").length != 1)
                {
                    $(".item-edit").remove();
                }
                if($("#order_delete").length != 1)
                {
                    $(".btn_delete").remove();
                }
                if($("#order_show").length != 1)
                {
                    $(".btn-view").remove();
                }
                 if($("#order_refund").length != 1)
                {
                    $(".refund-item").remove();
                }
             }
        });
        

        $('div.head-label').prepend($('#advanceFilter').html());
        $('div.head-label').append($('#advanceFilter1').html());
        $('#advanceFilter, #advanceFilter1').html('');

        $('.dataTable thead').on('input select', '.search', function () {
              let strict = $(this).attr('strict') || false
              let value = strict && this.value ? "^" + this.value + "$" : this.value
              dt_basic
                .column($(this).parent().index())
                .search(value, strict)
                .draw()
        });

        // on key up from input field
        $(document).on('change', '.advance-filter', function () {
            if($(this).val() == 'all')
            {
                dt_basic.columns().search('').draw();
            }
            else
            {
                filterColumn($(this).attr('data-column'), $(this).val());
            }
        });

        $(document).on('change', '.payment-status-checkbox', function () {
            let arayselectcheckbox = [];
            $("input:checkbox[name=paymentStatus]:checked").each(function(){
                arayselectcheckbox.push($(this).val());
            });

            let value = arayselectcheckbox.join("|");
             dt_basic
                .column($(this).attr('data-column'))
                .search(value, true, false, false)
                .draw()
        });

        $(document).on('change', '.status-radio', function () {
             dt_basic
                .column($(this).attr('data-column'))
                .search(this.value, true, false, false)
                .draw()
        });

        $(document).on('click', '.clear-payment-status-checkbox', function () {
            $(".payment-status-checkbox").prop('checked', false);
             filterColumn(5, "");
        });

        $(document).on('click', '.clear-payment-status-radio', function () {
            $(".status-radio").prop('checked', false);
            dt_basic.ajax.reload( null, "" );
        });
    }

    $(document).on('click', '.dt-checkboxes-cell', function(e){
        e.stopPropagation();
    });

    // Filter column wise function
    function filterColumn(i, val) {
       dt_basic.column(i).search(val, false).draw();
    }

    // Delete Record
    $('.dt-column-search tbody').on('click', '.delete-record', function() {
        dt_basic.row($(this).parents('tr')).remove().draw();
    });

    // $(document).on('click', '.create-new', function() {
    //     window.location.href = createUrl;
    // });

     // Delete Record
    $('.dt-column-search tbody').on('click', '.delete-record', function(e) {
        // dt_basic.row($(this).parents('tr')).remove().draw();
        let id = jQuery(this).data('id');
        Swal.fire(deleteConfirmBox('orders')).then(function (result) {
            if (result.value) {
              deleteRecord(id);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
             safeRecord('orders');
            }
        });
    });

    // Delete Record function
    function deleteRecord(id)
    {
        
        var formData = {
            "_method": 'DELETE',
        };
        var type = "POST";
        var ajaxurl = getListingUrl + '/'+ id;
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                let res = data.response;
                if(res.status_code == 2079){
                    successModal(res.message, 'Deleted!');
                    $('.modal').modal('hide');
                    dt_basic.ajax.reload( null, false );
                } else {
                    errorModal('Something went wrong!');
                }
            },
            error: function(data) {
               errorModal('Something went wrong!');
            }
        });
    }

    $(document).on('change', '#checkboxSelectAll, .dt-checkboxes', function(){
        if($('#checkboxSelectAll').prop('checked')) {
            if($('.card-header').find('.btn-more-actions').length == 0 || typeof $('.card-header').find('.btn-more-actions').length === "undefined"){
                dt_basic.button().add( 0, {
                    extend: 'collection',
                    className: 'btn btn-outline-secondary dropdown-toggle mr-2 btn-more-actions',
                    text:  'More Actions',
                    buttons: [
                        {
                            text: 'Mark as fulfilled',
                            className: 'dropdown-item more-action border-bottom',
                            attr:{
                                dataId:'fulfilled'
                            }
                        },
                        {
                            text: 'Archive orders',
                            className: 'dropdown-item more-action border-bottom',
                            attr:{
                                dataId:'archive'
                            }
                        },
                        {
                            text: 'Unarchive orders',
                            className: 'dropdown-item more-action border-bottom',
                            attr:{
                                dataId:'unarchive'
                            }
                        },
                    ],
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                        $(node).parent().removeClass('btn-group');
                        setTimeout(function() {
                            $(node).closest('.dt-buttons').removeClass('btn-group').addClass('d-inline-flex');
                        }, 50);
                    }
                });
            }

        } else {
            dt_basic.buttons( '.btn-more-actions' ).remove();
        }
    });

    $(document).on('click', '.more-action', function(){
        var actiontype = $(this).attr('dataid');
        Swal.fire(confirmBox()).then(function (result) {
            if (result.value) {
                performAction(actiontype);
            }
        });
    });

    // Delete Record function
    function performAction(actiontype)
    {
        openLoader();
        let ids = [];
        $('.dt-checkboxes').each(function () {
            if($(this).prop('checked')){
                ids.push($(this).val());
            }
        });
        
        var formData = {
            "_method": 'PUT',
            ids: ids,
            type: actiontype
        };
        var type = "POST";
        var ajaxurl = storeUrl + '/action';
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                closeLoader();
                let res = data.response;
                if(res.status_code == 2078 || res.status_code == 2080 || res.status_code == 2081){
                    successModal(res.message);
                    $('.modal').modal('hide');
                    dt_basic.ajax.reload( null, false );
                } else {
                    errorModal('Something went wrong!');
                }
            },
            error: function(data) {
                closeLoader();
                errorModal('Something went wrong!');
            }
        });
    }
})

    function statusApprovedChange(order_nr){
        
            let currentStatus = $("#customSwitch"+order_nr).prop('checked');
            let self = this
            Swal.fire({
            title: 'Are you sure?',
            text: "You want to edit apporve order!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, edit it!',
            customClass: {
              confirmButton: 'btn btn-primary',
              cancelButton: 'btn btn-outline-danger ml-1'
            },
             buttonsStyling: false
        })
         .then(function (result) {
            if (result.value) {
                self.changeApproveStatus(order_nr);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                $("#customSwitch"+order_nr).prop('checked',!currentStatus);
             }
        });

    }
    
    function changeApproveStatus(order_nr){
        openLoader();
        let admin_approve = ($('#customSwitch'+ order_nr).is(":checked")) ? 1 : 0;
            var formData = {
                "_method": 'POST',
                admin_approve: admin_approve,
                order_nr: order_nr,
               
            };
            var type = "POST";
            var ajaxurl = FRONT_API_URL + "orderapprove";
            $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                closeLoader();
                let res = data.response;
                if(res.status_code == 3057){
                     Swal.fire({
                        icon: 'success',
                        title: 'Edited!',
                        text: res.message,
                        customClass: {
                          confirmButton: 'btn btn-success'
                        }
                    });
                    $('.modal').modal('hide');
                } else {
                      Swal.fire({
                        title: 'Error!',
                        text: ' Something went wrong!',
                        icon: 'error',
                        customClass: {
                          confirmButton: 'btn btn-primary'
                        },
                        buttonsStyling: false
                    });
                }
            },
            error: function(data) {
                closeLoader();
                Swal.fire({
                    title: 'Error!',
                    text: ' Something went wrong!',
                    icon: 'error',
                    customClass: {
                      confirmButton: 'btn btn-primary'
                    },
                    buttonsStyling: false
                });
            }
        });
    }