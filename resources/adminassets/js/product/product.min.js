$(document).ready(function() {
    var dt_filter_table = $('.dt-column-search');

    if (dt_filter_table.length) {

        var dt_basic = dt_filter_table.DataTable({
            processing: true,
            serverSide: true,
            deferRender: true,
            ajax: getListingUrl,
            language: {
                paginate: {
                    previous: '&nbsp;',
                    next: '&nbsp;'
                },
                "processing": "Hang on. Waiting for response...",
                searchPlaceholder: "Search"
            },
            columns: [{ data: 'id' }, 
                      { data: 'title' , name: 'title' }, 
                      { data: 'status' , name: 'status' }, 
                      { data: 'is_track' , name: 'is_track' }, 
                      { data: 'product_type_title' , name: 'product_type.title' }, 
                      { data: 'vendor_name' , name: 'vendor.name' }, 
                      { data: '' , name: displayglobalActions }, 
                
            ],
            columnDefs: [
                {
                  // For Checkboxes
                  targets: 0,
                  orderable: false,
                  responsivePriority: 1,
                  render: function (data, type, full, meta) {
                    return (
                      '<div class="custom-control custom-checkbox"> <input class="custom-control-input dt-checkboxes" type="checkbox" value="'+ full.id +'" id="checkbox' +
                      data +
                      '" /><label class="custom-control-label" for="checkbox' +
                      data +
                      '"></label></div>'
                    );
                  },
                  checkboxes: {
                    selectAllRender:
                      '<div class="custom-control custom-checkbox"> <input class="custom-control-input" type="checkbox" value="" id="checkboxSelectAll" /><label class="custom-control-label" for="checkboxSelectAll"></label></div>'
                  }
                },
                {
                    targets: 1,
                    responsivePriority: 2,
                     render: function (data, type, full, meta) {
                        var $user_img = full['avatar'],
                          $name = full['title'],
                          $post = full['title'];
                        if ($user_img) {
                          // For Avatar image
                          var $output =
                            '<img src="'+ $user_img + '" alt="Avatar" width="32" height="32">';
                        } else {
                          // For Avatar badge
                          var stateNum = full['status'];
                          var states = ['success', 'danger', 'warning', 'info', 'dark', 'primary', 'secondary'];
                          var $state = states[stateNum],
                            $name = full['title'],
                            $initials = $name.match(/\b\w/g) || [];
                          $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();
                          $output = '<span class="avatar-content">' + $initials + '</span>';
                        }

                        var colorClass = $user_img === '' ? ' bg-light-' + $state + ' ' : '';

                        $name = (window.screen.availWidth > 1536) ? full.displaytitle : $name;
                        // Creates full output for row
                        var $row_output ='<a href="'+ getListingUrl + '/' + full.id + '/edit' + '" class="item-edit btn-edit" data-id="'+full.id+'" title="'+full.displaytitle+'" >' +
                          '<div class="d-flex justify-content-left align-items-center">' +
                              '<div class="avatar ' + colorClass + ' mr-1">' + $output + '</div>' +
                              '<div class="d-flex flex-column">' + '<span class="emp_name text-truncate font-weight-bold">' + $name + '</span>' + '</div>' +
                          '</div></a>';
                        return $row_output;
                      }
                },
                {
                    targets: 2,
                    responsivePriority: 3,
                    render: function (data, type, full, meta) {
                        var $status_output = (full['status'] == 1)?'Active':'Draft';
                        var $color_output = (full['status'] == 1)?'badge-success':'badge-warning';
                        var $row_output = '<div class="d-flex justify-content-left align-items-center"><div class="badge badge-glow '+ $color_output +'">'+ $status_output +'</div></div>';
                        return $row_output;
                      }
                },
                {
                    targets: 3,
                    responsivePriority: 4,
                    render: function (data, type, full, meta) {
                        var $track_output = (full['is_track'] == 1)?'Track':'Not Track';
                        var $row_output =  $track_output;
                        return $row_output;
                      }
                },
                {
                    targets: 4,
                    responsivePriority: 5,
                    
                },
                {
                    targets: 5,
                    responsivePriority: 6,
                    
                },
                {
                    // Actions
                    targets: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function(data, type, full, meta) {
                        return (
                            '<div class="d-inline-flex">' +
                            '<a href="'+ getListingUrl + '/' + full.id + '/edit' + '" class="item-edit edit-btn" data-id="'+full.id+'" >' +
                            feather.icons['edit'].toSvg({
                                class: 'font-small-4 mr-50'
                            }) +
                            '</a>' +
                            '<a href="javascript:;" class="delete-record delete-btn" data-id="'+full.id+'">' +
                            feather.icons['trash-2'].toSvg({
                                class: 'font-small-4'
                            }) +
                            '</a>' +
                            '</div>' 
                        );
                    }
                }
            ],
            order: [
              [1, 'dese']
            ],
            dom: '<"card-header border-bottom p-1"<"head-label"><"dt-action-buttons text-right"B>><"d-flex justify-content-between align-items-center mx-0 row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>t<"d-flex justify-content-between mx-0 row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
            orderCellsTop: true,
            displayLength: 10,
            lengthMenu: [10, 25, 50, 75, 100,200,400,500,1000,1500,2000],
            buttons: [
                {
                    // extend: 'collection',
                    // className: 'btn btn-outline-secondary dropdown-toggle mr-1',
                    text: 'Export',
                    className: 'export btn btn-outline-secondary mr-1',
                    attr: {
                        'data-toggle': 'modal',
                        'data-target': '#modalExport',
                        'id': 'exportbutton'
                    },
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                    }
                },
                {
                    text: 'Import',
                    className: 'import btn btn-outline-secondary mr-1',
                    attr: {
                        'data-toggle': 'modal',
                        'data-target': '#modalImport',
                        'id': 'importbutton'
                    },
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                    }
                },
                {
                    text: feather.icons['plus'].toSvg({
                        class: 'mr-50 font-small-4'
                    }) + 'Add New Record',
                    className: 'create-new btn btn-primary',
                    attr: {
                        'data-toggle': 'modal',
                        'data-target': '#modals-slide-in',
                        'id': 'btnProductCreate'
                    },
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                    }
                }
            ],
             initComplete: function(){

                if($("#importModal").length != 1)
                {
                    $("#importbutton").remove();
                }

                if($("#product_create").length != 1)
                {
                    $("#btnProductCreate").remove();
                }

                if($("#exportModal").length != 1)
                {
                    $("#exportbutton").remove();
                }

                if($("#product_delete").length != 1)
                {
                    $(".delete-btn").remove();
                }

                $("#DataTables_Table_0 tbody").after('<tfoot></tfoot>');
                $("#DataTables_Table_0 thead tr:first").clone().appendTo($("#column-search-datatable tfoot"));
             }
            
        });
        $('div.head-label').html('<h6 class="mb-0">Product Listing</h6>');

        $('.dataTable thead').on('input select', '.search', function () {
              let strict = $(this).attr('strict') || false
              let value = strict && this.value ? "^" + this.value + "$" : this.value
              dt_basic
                .column($(this).parent().index())
                .search(value, strict)
                .draw()
        });
    }

    // Delete Record
    $('.dt-column-search tbody').on('click', '.delete-record', function() {
        dt_basic.row($(this).parents('tr')).remove().draw();
    });

    $(document).on('click', '.create-new', function() {
    	window.location.href = createUrl;
    });

     // Delete Record
    $('.dt-column-search tbody').on('click', '.delete-record', function(e) {
        // dt_basic.row($(this).parents('tr')).remove().draw();
        let id = jQuery(this).data('id');
        Swal.fire(deleteConfirmBox('product')).then(function (result) {
            if (result.value) {
              deleteRecord(id);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
             safeRecord('product');
            }
        });
    });

    // Delete Record function
    function deleteRecord(id)
    {
        var formData = {
            "_method": 'DELETE',
        };
        var type = "POST";
        var ajaxurl = getListingUrl + '/'+ id;
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                let res = data.response;
                if(res.status_code == 2041){
                    successModal(res.message, 'Deleted!');
                    $('.modal').modal('hide');
                    dt_basic.ajax.reload( null, false );
                } else {
                    errorModal('Something went wrong!');
                }
            },
            error: function(data) {
               errorModal('Something went wrong!');
            }
        });
    }

    $(document).on('change', '#checkboxSelectAll, .dt-checkboxes', function(){
        if($('#checkboxSelectAll').prop('checked')) {
            if($('.card-header').find('.btn-more-actions').length == 0 || typeof $('.card-header').find('.btn-more-actions').length === "undefined"){
                dt_basic.button().add( 0, {
                    extend: 'collection',
                    className: 'btn btn-outline-secondary dropdown-toggle mr-1 btn-more-actions',
                    text:  'More Actions',
                    buttons: [{
                            text: feather.icons['trash'].toSvg({
                            class: 'font-small-4 mr-50'
                        }) + 'Delete Selected',
                            className: 'dropdown-item delete-selected',
                        },
                    ],
                    init: function(api, node, config) {
                        $(node).removeClass('btn-secondary');
                        $(node).parent().removeClass('btn-group');
                        setTimeout(function() {
                            $(node).closest('.dt-buttons').removeClass('btn-group').addClass('d-inline-flex');
                        }, 50);
                    }
                });
            }

        } else {
            dt_basic.buttons( '.btn-more-actions' ).remove();
        }
    });

    $(document).on('click', '.delete-selected', function(){
        Swal.fire(deleteConfirmBox('product')).then(function (result) {
            if (result.value) {
                deleteSelectedRecord();
            } else if (result.dismiss === Swal.DismissReason.cancel) {
              safeRecord('all selected product');
            }
        });
    });

    // Delete Record function
    function deleteSelectedRecord()
    {
        openLoader();
        let ids = [];
        $('.dt-checkboxes').each(function () {
            if($(this).prop('checked')){
                ids.push($(this).val());
            }
        });
        
        var formData = {
            "_method": 'DELETE',
            ids: ids
        };
        var type = "POST";
        var ajaxurl = destroyUrl;
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                  closeLoader();
                let res = data.response;
                if(res.status_code == 2041){
                     successModal(res.message, 'Deleted!');
                    $('.modal').modal('hide');
                    dt_basic.buttons( '.btn-more-actions' ).remove();
                    dt_basic.ajax.reload( null, false );
                } else {
                     errorModal('Something went wrong!');
                }
            },
            error: function(data) {
                closeLoader();
                errorModal('Something went wrong!');
            }
        });
    }

    $(document).on('click', '#uploadAndContinue', function(){
       
        if( $('#importFileName').val() == ''){
            errorModal('Please import file.');
            $('#uploadAndContinue').prop('disabled', true);
            return false;
        }

        let section = $('#uploadAndContinue');
        blockSection(section);
        var formData = {
            "media": $('#importFileName').val(),
            "importtype": $("input:radio[name=importtype]:checked").val()
        };
        var type = "POST";
        var ajaxurl = storeUrl + '/import';
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                let res = data.response;
                if(res.status_code == 2085){
                    successModal(res.message);
                    $('.modal').modal('hide');
                    dt_basic.ajax.reload( null, false );
                    Dropzone.forElement('#dpz-import-file').removeAllFiles(true);
                    $.ajax({
                        type: 'GET',
                        url: storeUrl + '/import/media',
                        data: {},
                        dataType: 'json',
                        success: function(data) {
                        }
                    });
                } 
                else if(res.status_code == 2087) {
                    if(formData.importtype == "shopify")
                    {
                        errorModal('Please import proper file from shopify');
                    }
                    else if(formData.importtype == "wordpress")
                    {
                        errorModal('Please import proper file from wordpress');
                    }
                    $('.alert-danger').removeClass('d-none');
                    Dropzone.forElement('#dpz-import-file').removeAllFiles(true)
                }
                else {
                    errorModal(res.message);
                }
                unblockSection(section);
            },
            error: function(data) {
                unblockSection(section);
                errorModal('Something went wrong!');
            }
        });
    })

    $(document).on('click', '#exportProducts', function(){
        let ids = [];
        if($('input[name=export_option]:checked').val() == 'current_page'){
            $('.dt-checkboxes').each(function () {
                ids.push($(this).val());
            });

            if(ids.length <= 0){
                errorModal('please select at least one product.');
                return;
            } 
        } else if($('input[name=export_option]:checked').val() == 'selected'){
            $('.dt-checkboxes').each(function () {
                if($(this).prop('checked')){
                    ids.push($(this).val());
                }
            });

            if(ids.length <= 0){
                errorModal('please select at least one product.');
                return;
            }
        }
       
        let section = $(this);
        blockSection(section);

        var formData =  $('#export-file').serialize() + "&ids=" + JSON.stringify(ids) + "&exporttype=" + $("input:radio[name=exporttype]:checked").val()
        var type = "POST";
        var ajaxurl = storeUrl + '/export';
        $.ajax({
            type: type,
            url: ajaxurl,
            data: formData,
            dataType: 'json',
            success: function(data) {
                let res = data.response;
                if(res.status_code == 3006){
                    $('.modal').modal('hide');
                    let fileName = res.data.file_name,
                    urlpath = res.data.url;
                    const link = document.createElement('a');
                    link.href = urlpath+fileName;
                    link.setAttribute('download', fileName);
                    document.body.appendChild(link);
                    link.click();
                } 
                else {
                    errorModal(res.message);
                }
                unblockSection(section);
            },
            error: function(data) {
                unblockSection(section);
                errorModal('Something went wrong!');
            }
        });
    })


})